{"version":3,"sources":["component/statistic/Statistic.js","component/feedbackOptions/FeedbackOptions.js","component/notification/Notification.js","component/section/Section.js","App.js","index.js","component/statistic/statistic.module.css"],"names":["Statistic","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","FeedbackOptions","feedbackOptions","onClick","name","type","Notification","message","Section","title","children","initialState","App","state","onHandleClickButton","event","target","setState","Math","round","className","css","container","this","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"wOAoBeA,EAlBG,SAAC,GAMZ,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,gCAEA,OACE,oCACE,mCAASJ,GACT,sCAAYC,GACZ,kCAAQC,GACR,sCAAYC,KACZ,iDAAuBC,IAAvB,QCSSC,EArBS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,OACE,oCACE,4BAAQC,QAASD,EAAiBE,KAAK,OAAOC,KAAK,UAAnD,QAGA,4BAAQF,QAASD,EAAiBE,KAAK,UAAUC,KAAK,UAAtD,WAGA,4BAAQF,QAASD,EAAiBE,KAAK,MAAMC,KAAK,UAAlD,SCASC,EATM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAKA,I,gBCcCC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,iCACE,4BAAKD,GACJC,ICDDC,EAAe,CACnBf,KAAM,EACNC,QAAS,EACTC,IAAK,GA8CQc,E,2MA3CbC,M,eACKF,G,EAGLG,oBAAsB,SAAAC,GACpB,IAAMX,EAAOW,EAAMC,OAAOZ,KAC1B,EAAKa,SAAL,eACGb,EAAO,EAAKS,MAAMT,GAAQ,K,EAG/BL,mBAAqB,WAAO,IAAD,EACM,EAAKc,MACpC,OAFyB,EACjBjB,KADiB,EACXC,QADW,EACFC,K,EAGzBE,gCAAkC,WAAO,IAC/BJ,EAAS,EAAKiB,MAAdjB,KACR,OAAOsB,KAAKC,MAAc,IAAPvB,EAAc,EAAKG,uB,wEAItC,OACE,yBAAKqB,UAAWC,IAAIC,WAClB,kBAAC,EAAD,CAASb,MAAM,yBACb,kBAAC,EAAD,CAAiBP,gBAAiBqB,KAAKT,uBAEV,IAA9BS,KAAKxB,qBACJ,kBAAC,EAAD,CAAcQ,QAAQ,sBAEtB,kBAAC,EAAD,CAASE,MAAM,aACb,kBAAC,EAAD,iBACMc,KAAKV,MADX,CAEEd,mBAAoBwB,KAAKxB,mBACzBC,gCACEuB,KAAKvB,yC,GAlCHwB,aCPlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,kBCJjDC,EAAOC,QAAU,CAAC,UAAY,gC","file":"static/js/main.f8f94b67.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Statistic = ({\n  good,\n  neutral,\n  bad,\n  countTotalFeedback,\n  countPositiveFeedbackPercentage\n}) => {\n  return (\n    <>\n      <p>Good:{good}</p>\n      <p>Neutral:{neutral}</p>\n      <p>Bad:{bad}</p>\n      <h4>TOTAL: {countTotalFeedback()}</h4>\n      <h4>POSITIVE FEEDBACK:{countPositiveFeedbackPercentage()} %</h4>\n    </>\n  );\n};\n\nexport default Statistic;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ feedbackOptions }) => {\n  return (\n    <>\n      <button onClick={feedbackOptions} name=\"good\" type=\"button\">\n        Good\n      </button>\n      <button onClick={feedbackOptions} name=\"neutral\" type=\"button\">\n        Neutral\n      </button>\n      <button onClick={feedbackOptions} name=\"bad\" type=\"button\">\n        Bad\n      </button>\n    </>\n  );\n};\n\nFeedbackOptions.propTypes ={\n  feedbackOptions: PropTypes.func \n}\n\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <h3>{message}</h3>;\n};\n\n\nNotification.propTypes ={\n  message: PropTypes.string\n}\n\nexport default Notification;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n//Создай компонент <Section title=\"\">, который рендерит секцию с заголовком и детей (children).\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes ={\n  title: PropTypes.string,\n  children: PropTypes.object\n}\n\nexport default Section;\n","import React, { Component } from \"react\";\nimport Statistic from \"./component/statistic/Statistic\";\nimport FeedbackOptions from \"./component/feedbackOptions/FeedbackOptions\";\nimport Notification from \"./component/notification/Notification\";\nimport css from \"./component/statistic/statistic.module.css\";\nimport Section from \"./component/section/Section\";\n\nconst initialState = {\n  good: 0,\n  neutral: 0,\n  bad: 0\n};\nclass App extends Component {\n  state = {\n    ...initialState\n  };\n\n  onHandleClickButton = event => {\n    const name = event.target.name;\n    this.setState({\n      [name]: this.state[name] + 1\n    });\n  };\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return Math.round((good * 100) / this.countTotalFeedback());\n  };\n\n  render() {\n    return (\n      <div className={css.container}>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions feedbackOptions={this.onHandleClickButton} />\n        </Section>\n        {this.countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Section title=\"STATISTIC\">\n            <Statistic\n              {...this.state}\n              countTotalFeedback={this.countTotalFeedback}\n              countPositiveFeedbackPercentage={\n                this.countPositiveFeedbackPercentage\n              }\n            />\n          </Section>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../src/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"statistic_container__9Rk-U\"};"],"sourceRoot":""}